name: Build and Push
on:
  push:
    branches:
      - main
      - multiarch_build
    tags:
      - v*
    paths-ignore:
      - 'LICENSE'
      - '**/.gitignore'
      - '**.md'
      - '**.adoc'
      - '*.txt'
  pull_request_target:
    paths-ignore:
      - 'LICENSE'
      - '**/.gitignore'
      - '**.md'
      - '**.adoc'
      - '*.txt'
#    types: [labeled, opened, synchronize, reopened]
  workflow_dispatch:
jobs:
  # Ensure that tests pass before publishing a new image.
  build-and-push-ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    steps: # Assign context variable for various action contexts (tag, main, CI)
 #     - name: Assigning CI context
 #       if: github.head_ref != '' && github.head_ref != 'main' && !startsWith(github.ref, 'refs/tags/v')
 #       run: echo "BUILD_CONTEXT=ci" >> $GITHUB_ENV
 #     - name: Assigning tag context
 #       if: github.head_ref == '' && startsWith(github.ref, 'refs/tags/v')
 #       run: echo "BUILD_CONTEXT=tag" >> $GITHUB_ENV
 #     - name: Assigning main context
 #       if: github.head_ref == '' && github.ref == 'refs/heads/main'
 #       run: echo "BUILD_CONTEXT=main" >> $GITHUB_ENV
      #
      # Run checkouts
 #     - uses: mheap/github-action-required-labels@v4
 #       if: env.BUILD_CONTEXT == 'ci'
 #       with:
 #         mode: minimum
 #         count: 1
 #         labels: "ok-to-test, lgtm, approved"
 #     - uses: actions/checkout@v3
 #       if: env.BUILD_CONTEXT == 'ci'
 #       with:
 #         ref: ${{ github.event.pull_request.head.sha }}
 #     - uses: actions/checkout@v3
 #       if: env.BUILD_CONTEXT == 'main' ||  env.BUILD_CONTEXT == 'tag'
      #
      # Print variables for debugging
      - name: Log reference variables
        run: |
          echo "CONTEXT: ${{ env.BUILD_CONTEXT }}"
          echo "GITHUB.REF: ${{ github.ref }}"
          echo "GITHUB.HEAD_REF: ${{ github.head_ref }}"
          echo "SHA: ${{ github.event.pull_request.head.sha }}"
          echo "MAIN IMAGE AT: ${{ vars.QUAY_RELEASE_REPO }}:latest"
          echo "LMES DRIVER IMAGE AT: ${{ vars.QUAY_RELEASE_LMES_DRIVER_REPO }}:latest"
          echo "LMES JOB IMAGE AT: ${{ vars.QUAY_RELEASE_LMES_JOB_REPO }}:latest"
          echo "GUARDRAILS ORCH IMAGE AT: ${{ vars.QUAY_RELEASE_GUARDRAILS_REPO }}:latest"

          echo "CI IMAGE AT: quay.io/trustyai/trustyai-service-operator-ci:${{ github.event.pull_request.head.sha }}"
      #
      # Set environments depending on context
      - name: Set CI environment
        if:  env.BUILD_CONTEXT == 'ci'
        run: |
          echo "TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=quay.io/trustyais390x/operator-ci" >> $GITHUB_ENV
          echo "DRIVER_IMAGE_NAME=quay.io/trustyais390x/lmeval-driver" >> $GITHUB_ENV
          echo "JOB_IMAGE_NAME=quay.io/trustyais390x/lmeval-job" >> $GITHUB_ENV
          echo "ORCH_IMAGE_NAME=quay.io/trustyais390x/guardrails" >> $GITHUB_ENV

      - name: Set main-branch environment
        if:  env.BUILD_CONTEXT == 'main'
        run: |
          echo "TAG=latest" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ vars.QUAY_RELEASE_REPO }}" >> $GITHUB_ENV
          echo "DRIVER_IMAGE_NAME=${{ vars.QUAY_RELEASE_LMES_DRIVER_REPO }}" >> $GITHUB_ENV
          echo "JOB_IMAGE_NAME=${{ vars.QUAY_RELEASE_LMES_JOB_REPO }}" >> $GITHUB_ENV
          echo "ORCH_IMAGE_NAME=${{ vars.QUAY_RELEASE_GUARDRAILS_REPO }}" >> $GITHUB_ENV

      - name: Set tag environment
        if: env.BUILD_CONTEXT == 'tag'
        run: |
          echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ vars.QUAY_RELEASE_REPO }}" >> $GITHUB_ENV
          echo "DRIVER_IMAGE_NAME=${{ vars.QUAY_RELEASE_LMES_DRIVER_REPO }}" >> $GITHUB_ENV
          echo "JOB_IMAGE_NAME=${{ vars.QUAY_RELEASE_LMES_JOB_REPO }}" >> $GITHUB_ENV
          echo "ORCH_IMAGE_NAME=${{ vars.QUAY_RELEASE_GUARDRAILS_REPO }}" >> $GITHUB_ENV

      # Run docker commands
    #  - name: Put expiry date on CI-tagged image
    #    if:  env.BUILD_CONTEXT == 'ci'
    #    run: sed -i 's#summary="odh-trustyai-service-operator\"#summary="odh-trustyai-service-operator" \\ \n      quay.expires-after=7d#' Dockerfile
      - name: Log in to Quay
        run: docker login -u ${{ secrets.QUAY_ROBOT_USERNAME }} -p ${{ secrets.QUAY_ROBOT_SECRET }} quay.io

      - name: Set up QEMU
        if: env.BUILD_CONTEXT == 'main' || env.BUILD_CONTEXT == 'tag'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        if: env.BUILD_CONTEXT == 'main' || env.BUILD_CONTEXT == 'tag'
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Main Image (multi-arch)
        if: env.BUILD_CONTEXT == 'main' || env.BUILD_CONTEXT == 'tag'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/s390x,linux/ppc64le
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG }}
          push: true

      - name: Build and Push LMES Driver Image (multi-arch)
        if: env.BUILD_CONTEXT == 'main' || env.BUILD_CONTEXT == 'tag'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.driver
          platforms: linux/amd64,linux/s390x,linux/ppc64le
          tags: ${{ env.DRIVER_IMAGE_NAME }}:${{ env.TAG }}
          push: true

      - name: Build and Push LMES Job Image (multi-arch)
        if: env.BUILD_CONTEXT == 'main' || env.BUILD_CONTEXT == 'tag'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.lmes-job
          platforms: linux/amd64
          tags: ${{ env.JOB_IMAGE_NAME }}:${{ env.TAG }}
          push: true

      - name: Build and Push Guardrails Orchestrator Image (multi-arch)
        if: env.BUILD_CONTEXT == 'main' || env.BUILD_CONTEXT == 'tag'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.orchestrator
          platforms: linux/amd64
          tags: ${{ env.ORCH_IMAGE_NAME }}:${{ env.TAG }}
          push: true
